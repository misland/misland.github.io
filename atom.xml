<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>暖宝宝官方认证铲屎官</title>
  
  
  <link href="https://misland.github.io/atom.xml" rel="self"/>
  
  <link href="https://misland.github.io/"/>
  <updated>2020-11-30T03:30:45.496Z</updated>
  <id>https://misland.github.io/</id>
  
  <author>
    <name>李洛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Idea新建Springboot项目，整合jsp</title>
    <link href="https://misland.github.io/2020/11/30/20201127/"/>
    <id>https://misland.github.io/2020/11/30/20201127/</id>
    <published>2020-11-30T03:09:41.000Z</published>
    <updated>2020-11-30T03:30:45.496Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看杨开振的《深入浅出springboot2.x》这本书，看到SpringMVC这两章时，就想建个demo试试，他用的是jsp作模板，这个东西现在基本是被淘汰了的，不过学习嘛，用这个来了解一下spring的工作流程还是可以的，结果在建项目时遇到了点坑，这里记录下</p><h2 id="问题1：springboot集成jsp需要哪些package？"><a href="#问题1：springboot集成jsp需要哪些package？" class="headerlink" title="问题1：springboot集成jsp需要哪些package？"></a>问题1：springboot集成jsp需要哪些package？</h2><p>答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>测试下来，只要上面两个package即可，测试了多个springboot多个版本（2.0.0-2.3.6），只要加了上面两个package都是可以正常解析jsp模板的<br><br><strong>注意：package引入时不要加scope-&gt;provided选项，否则可能会因为idea设置导致无法使用问题，如果你遇到了这个问题，也可以参考这里（<a href="https://blog.csdn.net/qq_43123875/article/details/82351985">传送门</a>）尝试解决</strong></p><a id="more"></a><h2 id="问题2：怎么让让jsp文件目录融入到项目中？"><a href="#问题2：怎么让让jsp文件目录融入到项目中？" class="headerlink" title="问题2：怎么让让jsp文件目录融入到项目中？"></a>问题2：怎么让让jsp文件目录融入到项目中？</h2><p>答：用spring initializer的模板初始化的项目，是没有传统的webapp文件夹的，即使你勾选了web模块，项目初始目录应该是没有下面的webapp文件夹的<br><br><img src="1.jpg" alt="init"><br><br>解决办法就是手动创建一个Directory😂，但是创建完会发现文件夹图标与上面图片中不一样，没有那个小圆点图标<br><br><img src="2.jpg" alt="create"><br><br>这是因为这时项目还没有将这个文件夹认为是存放web资源文件的地方，这时可以右键项目名称，在菜单中找到下面的Open Module Settings选项<br><br><img src="3.jpg" alt="module"><br><br>在弹出的窗口中（Modules-&gt;项目名称-&gt;Web）设置Web Resource Directory，如下图<br><br><img src="4.jpg" alt="settings"><br><br>点击1处的加号，在弹出框中2那里将目录设置成刚才添加的webapp文件夹，确定后，就能看到webapp文件夹变成有小圆点图标的样子了，<strong>并且此时右键webapp文件夹新建文件时会有JSP/JSPX选项</strong><br><br><strong>注意，此时只是在idea中设置好了，但是sprinMVC并不知道去哪里找jsp模板，还要在application.properties文件中添加下面两行代码才行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.view.prefix&#x3D;&#x2F;WEB-INF&#x2F;jsp&#x2F;</span><br><span class="line">spring.mvc.view.suffix&#x3D;.jsp</span><br></pre></td></tr></table></figure><h2 id="问题3：怎么设置路由？怎么返回页面？"><a href="#问题3：怎么设置路由？怎么返回页面？" class="headerlink" title="问题3：怎么设置路由？怎么返回页面？"></a>问题3：怎么设置路由？怎么返回页面？</h2><p>答：springMVC中已经为我们做了很多东西，并不需要我们写太多东西，可以建个HelloController文件，加入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">    public String test() &#123;</span><br><span class="line">        return &quot;hello&#x2F;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;test2&quot;)</span><br><span class="line">    public ModelAndView test2() &#123;</span><br><span class="line">        ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">        mv.setViewName(&quot;hello&#x2F;test2&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在webapp下创建jsp文件，目录如下<br><br><img src="5.jpg" alt="directory"><br><br>上面设置了两个路由，一个直接返回String，一个返回的是一个ModelAndView，都可以在前端正常渲染页面，之所以这样是springMVC内部做了很多处理，详细的不在这里说了，这里只是记录环境搭建。<br><br><a href="https://gitee.com/loki-test/springboot-jsp">gitee测试代码</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在看杨开振的《深入浅出springboot2.x》这本书，看到SpringMVC这两章时，就想建个demo试试，他用的是jsp作模板，这个东西现在基本是被淘汰了的，不过学习嘛，用这个来了解一下spring的工作流程还是可以的，结果在建项目时遇到了点坑，这里记录下&lt;/p&gt;
&lt;h2 id=&quot;问题1：springboot集成jsp需要哪些package？&quot;&gt;&lt;a href=&quot;#问题1：springboot集成jsp需要哪些package？&quot; class=&quot;headerlink&quot; title=&quot;问题1：springboot集成jsp需要哪些package？&quot;&gt;&lt;/a&gt;问题1：springboot集成jsp需要哪些package？&lt;/h2&gt;&lt;p&gt;答：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;&amp;#x2F;groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;&amp;#x2F;artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;&amp;#x2F;groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;jstl&amp;lt;&amp;#x2F;artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试下来，只要上面两个package即可，测试了多个springboot多个版本（2.0.0-2.3.6），只要加了上面两个package都是可以正常解析jsp模板的&lt;br&gt;&lt;br&gt;&lt;strong&gt;注意：package引入时不要加scope-&amp;gt;provided选项，否则可能会因为idea设置导致无法使用问题，如果你遇到了这个问题，也可以参考这里（&lt;a href=&quot;https://blog.csdn.net/qq_43123875/article/details/82351985&quot;&gt;传送门&lt;/a&gt;）尝试解决&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://misland.github.io/categories/java/"/>
    
    
    <category term="Springboot" scheme="https://misland.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>使用Systemback制做Ubuntu18.04镜像</title>
    <link href="https://misland.github.io/2020/11/09/ubuntu-systemback/"/>
    <id>https://misland.github.io/2020/11/09/ubuntu-systemback/</id>
    <published>2020-11-09T09:10:04.000Z</published>
    <updated>2020-11-10T03:16:44.757Z</updated>
    
    <content type="html"><![CDATA[<p>最近因工作需要，想制做Ubuntu Desktop 18.04版本的系统镜像，在网上看了下SystemBack这个工具还不错，就试了下，试了下确实好用，不过有些问题还是需要注意一下的，并且这个工具还原时需要手动设置挂载点，这个对于不熟悉Linux的童鞋来说，可能还真有点坑，所以这里记录一下使用过程吧<br><br>here wo go！！！😜<br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>  这个工具没有18.04的源了，只能用16.04的，但是CSDN上很多教程都不提这一点，只是无脑的抄了别人的文章，我刚开始时就被坑了，按照CSDN上的一些垃圾教程，直接添加了18.04的ppa，结果后面安装时失败，各种问题，下面是正确的安装方式<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb http://ppa.launchpad.net/nemh/systemback/ubuntu xenial main&quot;</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 382003C2C8B7B4AB813E915B14E4942973C62A1B</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install systemback</span><br></pre></td></tr></table></figure><p>如果你没遇到问题，那恭喜你已经安装成功了，可以继续看下面的使用部分了，如果失败那请搜索错误原因吧，因为我按照上面的方式装过好几次都是正常的😉<br>  如果已经看了垃圾教程，装了ppa，就要先删除<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository --remove ppa:nemh&#x2F;systemback</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>安装完在程序列表中就可以看到Systemback了，点击打开会看到下面的界面<br><br><img src="1.png" alt="start"><br><br>如上图，点击Live system create，之后进到下面界面<br><img src="2.png" alt="start"><br><br>左上角的Working directory(工作目录)其实就是存放镜像文件路径，设成想放的路径就好，至于下面的镜像名字自己定义就好，设置完点Crate new开始制作（我这一步遇到个坑，装系统时磁盘空间设置太小，空间不够，无法备份，最后用GParted，给系统盘增加了空间才成功，当然这是自己犯蠢，与软件无关😅）<br></p><p>接下来就是等待备份完成了，趁机去喝口茶或抽支烟啥的<del>~</del><br><br><img src="3.png" alt="start"><br><br>如上，备份成功后若你插入的有U盘可以点击Write to target将备份SBLIVE写入U盘，这样这个U盘就会变成启动盘，可以直接启动了（用下来发现好像只能将SBLIVE写入，ISO文件是无法写入的）<br></p><p>也可以点击Convert to ISO,将SBLIVE转成ISO，iso文件存放路径就在上面说的Working directory下，有了iso如何处理就自己尝试吧~</p><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><p>把U盘插入要还原电脑，设置U盘启动，进去后会有下面界面<br><img src="4.png" alt="start"><br></p><p>第一个是进入live system，这个是啥意思呢，其实就是进入备份时的系统状态，当时是啥样，进去后就啥样，但是这时系统并没有还原到电脑，退出就没了，进入系统后，再次打开软件，点击上面第一张图中的system install，可进入安装页面(我制做的U盘，启动后第二个菜单显示的是Boot System Installer，与上图中有所不同，选择这个能直接进入系统还原页面，比较方便)<br></p><p><img src="6.png" alt="user"><br></p><p>这里设置用户名、密码等，没啥可说的，自行设置吧，设置完点击下一步，进入下面页面<br><br></p><p><img src="5.png" alt="start"><br><br>如上图，这里是设置挂载点页面，具体操作方法如下：</p><ol><li>选中要安装系统的硬盘，点右边的卸载/delete!，将其卸载</li><li>/、/home、swap、/boot/efi这四个挂载点是必须要设置的，选中要挂载的硬盘，右边会出现一个文本框，让你输入分割的大小，这里根据自己的硬盘大小，酌情分配，数字设置完毕点击下面的箭头即可，建议的分割大小是<ol><li>先分配swap，大小与内存相当即可</li><li>再分配boot/efi，大小200m即可</li><li>最后分配/和/home，文件系统都选ext4即可，/与/home的大小比一般是1:10到3:10，看个人需求而定。</li></ol></li><li>上面四个挂载点分割完毕后，进行挂载，先选中上一步分割的硬盘，在“挂载点”下拉列表中选择要挂载的目的即可，挂载/boot/efi时你可能会发现下拉列表中没有，直接在文件框中输入这个就好了😂<br></li></ol><h2 id="注意下面的选项"><a href="#注意下面的选项" class="headerlink" title="注意下面的选项"></a>注意下面的选项</h2><ul><li>传递用户配置文件：选中后用户家目录里面的文件都会一并还原，不选择不会还原</li><li>安装GRUB2引导程序，不能点禁用，上图说要将挂载点设为/boot/efi，但是我还原了两次，有一次是我加完/boot/efi后，这个自动变成了EFI，另一次却没有，没有的话选择你要将系统还原的硬盘，也是可以成功还原的</li></ul><p>设置完成后，点击下一步再次静静等待吧~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近因工作需要，想制做Ubuntu Desktop 18.04版本的系统镜像，在网上看了下SystemBack这个工具还不错，就试了下，试了下确实好用，不过有些问题还是需要注意一下的，并且这个工具还原时需要手动设置挂载点，这个对于不熟悉Linux的童鞋来说，可能还真有点坑，所以这里记录一下使用过程吧&lt;br&gt;&lt;br&gt;here wo go！！！😜&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;  这个工具没有18.04的源了，只能用16.04的，但是CSDN上很多教程都不提这一点，只是无脑的抄了别人的文章，我刚开始时就被坑了，按照CSDN上的一些垃圾教程，直接添加了18.04的ppa，结果后面安装时失败，各种问题，下面是正确的安装方式&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository &lt;span class=&quot;string&quot;&gt;&amp;quot;deb http://ppa.launchpad.net/nemh/systemback/ubuntu xenial main&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 382003C2C8B7B4AB813E915B14E4942973C62A1B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt install systemback&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你没遇到问题，那恭喜你已经安装成功了，可以继续看下面的使用部分了，如果失败那请搜索错误原因吧，因为我按照上面的方式装过好几次都是正常的😉&lt;br&gt;  如果已经看了垃圾教程，装了ppa，就要先删除&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository --remove ppa:nemh&amp;#x2F;systemback&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://misland.github.io/categories/Linux/"/>
    
    
    <category term="Ubuntu" scheme="https://misland.github.io/tags/Ubuntu/"/>
    
    <category term="系统" scheme="https://misland.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Couldn&#39;t get file path for photo on ANDROID 10</title>
    <link href="https://misland.github.io/2020/11/03/android-camera/"/>
    <id>https://misland.github.io/2020/11/03/android-camera/</id>
    <published>2020-11-03T01:04:55.000Z</published>
    <updated>2020-11-10T03:08:39.301Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在使用RN的react-native-image-picker（v2.3.4）组件时遇到了一个问题，通过yarn添加组件后，根据文档导入变量并调用相机拍照</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ImagePicker <span class="keyword">from</span> <span class="string">&#x27;react-native-image-picker&#x27;</span>;</span><br><span class="line">cameraOperation() &#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      title: <span class="string">&#x27;Take a photo&#x27;</span>,</span><br><span class="line">      <span class="comment">//自定义按钮，目前没发现有什么用</span></span><br><span class="line">      customButtons: [&#123; <span class="attr">name</span>: <span class="string">&#x27;fb&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Choose photo from Facebook&#x27;</span> &#125;],</span><br><span class="line">      storageOptions: &#123;</span><br><span class="line">        skipBackup: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;images&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ImagePicker.showImagePicker(options, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//path：图片的存储路径</span></span><br><span class="line">      <span class="comment">//uri：在当前app内的存储路径</span></span><br><span class="line">      <span class="comment">//width、height：拿到的图片的宽高</span></span><br><span class="line">      <span class="comment">//data：图片的base64格式数据</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Response = &#x27;</span>, response);</span><br><span class="line">      <span class="keyword">if</span> (response.didCancel) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;User cancled image picker&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (response.error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">&#x27;ImagePicker error:&#x27;</span>, response.error);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (response.customButton) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;User tapped custom button:&#x27;</span>, response.customButton);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.uri);</span><br><span class="line">        <span class="keyword">const</span> source = &#123; <span class="attr">uri</span>: response.uri &#125;;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123; <span class="attr">avatarSource</span>: source &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然而在支行时，却抛出了标题所述的错误，开始不得其解，后来搜索了一下资料，原来是因为API29的原因，API29对应的安卓版本是Android10，而Android中引入了分区存储（Scoped storage）的概念，这样做的初衷是为了避免APP乱写文件从而产生很多乱七八糟的冗余文件，更好的保护用户数据，具体的介绍可以看这里（<a href="https://juejin.im/post/6844904063432130568">传送门</a>）<br></p><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改AndroidManifest.xml文件<br>我用的RN版本是0.63.3，react-native-cli的版本是4.13.0，项目是用react-native-cli来init的，AndroidManifest.xml路径在android/app/src/main下，在application标签中，添加<br><code>android:requestLegacyExternalStorage =&quot;true&quot;</code><br>属性，即可正常调用摄像头并拍照~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天在使用RN的react-native-image-picker（v2.3.4）组件时遇到了一个问题，通过yarn添加组件后，根据文档导入变量并调用相机拍照&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ImagePicker &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;react-native-image-picker&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cameraOperation() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; options = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      title: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Take a photo&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//自定义按钮，目前没发现有什么用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      customButtons: [&amp;#123; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;fb&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;Choose photo from Facebook&amp;#x27;&lt;/span&gt; &amp;#125;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      storageOptions: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        skipBackup: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        path: &lt;span class=&quot;string&quot;&gt;&amp;#x27;images&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ImagePicker.showImagePicker(options, &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//path：图片的存储路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//uri：在当前app内的存储路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//width、height：拿到的图片的宽高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;//data：图片的base64格式数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;Response = &amp;#x27;&lt;/span&gt;, response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.didCancel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;User cancled image picker&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;&amp;#x27;ImagePicker error:&amp;#x27;&lt;/span&gt;, response.error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.customButton) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;User tapped custom button:&amp;#x27;&lt;/span&gt;, response.customButton);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(response.uri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = &amp;#123; &lt;span class=&quot;attr&quot;&gt;uri&lt;/span&gt;: response.uri &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.setState(&amp;#123; &lt;span class=&quot;attr&quot;&gt;avatarSource&lt;/span&gt;: source &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而在支行时，却抛出了标题所述的错误，开始不得其解，后来搜索了一下资料，原来是因为API29的原因，API29对应的安卓版本是Android10，而Android中引入了分区存储（Scoped storage）的概念，这样做的初衷是为了避免APP乱写文件从而产生很多乱七八糟的冗余文件，更好的保护用户数据，具体的介绍可以看这里（&lt;a href=&quot;https://juejin.im/post/6844904063432130568&quot;&gt;传送门&lt;/a&gt;）&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://misland.github.io/categories/Android/"/>
    
    
    <category term="React Native" scheme="https://misland.github.io/tags/React-Native/"/>
    
  </entry>
  
</feed>
